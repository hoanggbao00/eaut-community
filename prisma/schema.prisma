// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource eaut_db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enum
enum UserRole {
  USER
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum VoteType {
  UP
  DOWN
}

enum Entity {
  POST //create, update, vote, create comment
  COMMENT // create, update, vote, create replies
  REQUEST // create, approve, reject
  COMMUNITY // new follower
  OTHERS
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

model UpdateHistory {
  id         String   @id @default(cuid()) @map("_id")
  type       Entity
  oldContent Json
  newContent Json
  createdAt  DateTime @default(now())
  updatedBy  String
  approvedBy String

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String?
  Community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)

  postId String?
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

// Model
model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  role          UserRole  @default(USER)
  isDeleted      Boolean   @default(false)
  createdAt     DateTime  @default(now())

  updateHistory UpdateHistory[]

  accounts Account[]
  sessions Session[]

  // Community
  createdCommunity   Community[]
  communityModerator CommunityModerator[] @relation("ModeratorOf")
  follow             Follow[]

  // Request
  requestSender Request[] @relation("RequestSender")

  // Post
  post        Post[]
  postVote    PostVote[]
  comment     Comment[]
  commentVote CommentVote[]

  // Notification
  sender   Notification[] @relation("NotificationSender")
  receiver Notification[] @relation("NotificationReceiver")
}

model Category {
  id        String      @id @default(cuid()) @map("_id")
  title     String      @unique
  icon String
  community Community[]
}

model Community {
  id             String   @id @default(cuid()) @map("_id")
  name           String   @unique
  description    String?
  cover          String?
  image          String?
  rules          Json[]
  communityAlert String[]
  creatorId      String
  categoryId     String?
  notifierIds    String[]
  isAccessible   Boolean  @default(false)
  createdAt      DateTime @default(now())

  updateHistory UpdateHistory[]

  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  followers Follow[]

  posts Post[]

  moderators CommunityModerator[]

  requests Request[] @relation("CommunityRequest")

  notification Notification[] @relation("CommunityNotification")
}

model CommunityModerator {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  communityId String
  createdDate DateTime @default(now())

  user      User      @relation("ModeratorOf", fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model Request {
  id          String        @id @default(cuid()) @map("_id")
  senderId    String
  sendTo      String
  requestType ActionType
  requestFor  Entity
  postId      String?
  communityId String?
  communityName String?
  newContent  Json?
  status      RequestStatus
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  updateBy    String?
  detail      String

  user      User       @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  community Community? @relation("CommunityRequest",fields: [communityId], references: [id], onDelete: SetNull)
  post      Post?      @relation("PostInRequest", fields: [postId], references: [id], onDelete: SetNull)

  notification Notification[] @relation("RequestNotification")
}

model Follow {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  communityId String
  createdDate DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid()) @map("_id")
  title       String
  content     Json?
  attachment  String?
  authorId    String
  communityId String
  isArchived  Boolean?
  achivedDate DateTime?
  notifierIds String[]
  createdAt   DateTime  @default(now())

  updateHistory UpdateHistory[]

  comments Comment[]
  votes    PostVote[]

  includeNotification Notification[] @relation("PostNotification")

  author        User      @relation(fields: [authorId], references: [id])
  community     Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  postInRequest Request[] @relation("PostInRequest")
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  authorId  String
  postId    String
  replyToId String?
  createdAt DateTime @default(now())

  updateHistory UpdateHistory[]

  replyTo      Comment?       @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]      @relation("ReplyTo")
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  votes        CommentVote[]
  notification Notification[] @relation("CommentNotification")
}

model PostVote {
  id     String   @id @default(cuid()) @map("_id")
  userId String
  postId String
  type   VoteType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommentVote {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  commentId String
  type      VoteType

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String  @id @default(cuid()) @map("_id")
  type       Entity
  message    String
  senderId   String
  notifierId String
  entityId   String?
  communityName String?
  status  Boolean @default(false)
  createdAt DateTime @default(now())

  post Post? @relation("PostNotification", fields: [entityId], references: [id], onDelete: Cascade)

  community Community? @relation("CommunityNotification", fields: [entityId], references: [id], onDelete: SetNull)

  request Request? @relation("RequestNotification", fields: [entityId], references: [id], onDelete: SetNull)

  comment Comment? @relation("CommentNotification", fields: [entityId], references: [id], onDelete: SetNull)

  sender User @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  notifier User @relation("NotificationReceiver", fields: [notifierId], references: [id], onDelete: Cascade)
}
